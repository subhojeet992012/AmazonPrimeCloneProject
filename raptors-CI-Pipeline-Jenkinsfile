pipeline {
    agent any
    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }
    environment {
        SCANNER_HOME = tool 'sonarscanner'
    }
    parameters {
        string(name: 'ECR_REPO_NAME', description: 'Enter the name of the ECR', defaultValue: 'amazon-prime')
        string(name: 'AWS_ACCOUNT_ID', description: 'Enter the AccountID', defaultValue: '')
        string(name: 'AWS_ACCESS_KEY', description: 'Enter the aws access key', defaultValue: '')
        string(name: 'AWS_SECRET_KEY', description: 'Enter the aws secret key', defaultValue: '')
    }
    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/subhojeet992012/AmazonPrimeCloneProject.git'
            }
        }
        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=amazon-prime \
                        -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }
        stage('3. Sonar Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
        stage('4. NPM Install') {
            steps {
                sh "npm install"
            }
        }
        stage('5. Trivy Scanning') {
            steps {
                sh """
                    who
                    whoami
                    pwd
                    docker run --rm \
                    -v \$(pwd):/project \
                    -e TRIVY_TIMEOUT=10m \
                    aquasec/trivy:latest filesystem /project > trivy-scan-results.txt
                """
            }
        }
        stage('6. Docker Image Build') {
            steps {
                sh "docker build -t ${params.ECR_REPO_NAME} ."
            }
        }
        stage('7. Create ECR Repository') {
            steps {
                    sh """
                        aws configure set aws_access_key_id ${params.AWS_ACCESS_KEY}
                        aws configure set aws_secret_access_key ${params.AWS_SECRET_KEY}
                        aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-1 || \
                        aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                    """
            }
        }
        stage('8. Logging to ECR and tagging image') {
            steps {
                    sh """
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
            }
        }
        stage('9. Push the image to ECR') {
            steps {
                    sh """
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
            }
        }
        stage('10. Update the deployment tag') {
            steps {
                withCredentials([string(credentialsId: 'GITHUB_ACCESS_TOKEN', variable: 'GITHUB_ACCESS_TOKEN')]) {
                    sh '''
                        cd k8s_files
                        sed -i "s|image: .*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/amazon-prime:${BUILD_NUMBER}|" deployment.yaml
                        git add deployment.yaml
                        git commit -m "Push the build ${BUILD_NUMBER}"
                        set +x # Prevent sensitive info from being printed
                        git push https://oauth2:${GITHUB_ACCESS_TOKEN}@github.com/subhojeet992012/AmazonPrimeCloneProject.git
                        set -x
                    '''
                    }
                }
            }
        stage('11. Cleanup the Images') {
            steps {
                sh """
                    docker rmi -f ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                    docker rmi -f ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                """
            }
        }
    }
}
